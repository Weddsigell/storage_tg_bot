import os
import django
from datetime import datetime, timedelta
from apscheduler.schedulers.background import BackgroundScheduler
from telegram import Bot
from ptb.settings import TG_BOT_TOKEN


os.environ.setdefault("DJANGO_SETTINGS_MODULE", "bot_core.settings")
django.setup()

from bot_django_app.models import Box, Notification


bot = Bot(token=TG_BOT_TOKEN)


def monthly_reminder_job():
    print("[SCHEDULER] Running monthly reminder job...")
    today = datetime.today().date()
    expired_boxes = Box.objects.filter(end_date__lt=today, is_active=True)

    for box in expired_boxes:
        user = box.user
        text = (
            f"üì¶ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Å—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–µ—â–µ–π –≤ –±–æ–∫—Å–µ #{box.id} –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. "
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–±–µ—Ä–∏—Ç–µ –∏—Ö —Å–æ —Å–∫–ª–∞–¥–∞ –∏–ª–∏ –ø—Ä–æ–¥–ª–∏—Ç–µ –∞—Ä–µ–Ω–¥—É."
        )

        if not Notification.objects.filter(user=user, box=box, notification_type="monthly_reminder").exists():
            try:
                bot.send_message(chat_id=user.telegram_id, text=text)
                Notification.objects.create(
                    user=user,
                    box=box,
                    notification_type="monthly_reminder"
                )
                print(f"[INFO] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.full_name}")
            except Exception as e:
                print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


def warning_before_expiration_job():
    print("[SCHEDULER] Running 3-day warning job...")
    target_date = datetime.today().date() + timedelta(days=3)
    expiring_boxes = Box.objects.filter(end_date=target_date, is_active=True)

    for box in expiring_boxes:
        user = box.user
        text = (
            f"‚è≥ –ù–∞–ø–æ–º–∏–Ω–∞–µ–º: —Å—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∞—à–µ–π –∫–æ—Ä–æ–±–∫–∏ #{box.id} "
            f"–∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 3 –¥–Ω—è ‚Äî {box.end_date}. "
            f"–ü—Ä–æ–¥–ª–∏—Ç–µ –∞—Ä–µ–Ω–¥—É –∏–ª–∏ –∑–∞–±–µ—Ä–∏—Ç–µ –≤–µ—â–∏."
        )

        if not Notification.objects.filter(user=user, box=box, notification_type="expiration_warning").exists():
            try:
                bot.send_message(chat_id=user.telegram_id, text=text)
                Notification.objects.create(
                    user=user,
                    box=box,
                    notification_type="expiration_warning"
                )
                print(f"[INFO] –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∑–∞ 3 –¥–Ω—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.full_name}")
            except Exception as e:
                print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {e}")


def overdue_storage_job():
    print("[SCHEDULER] Running overdue job...")
    today = datetime.today().date()
    overdue_boxes = Box.objects.filter(end_date__lt=today, is_active=True)

    for box in overdue_boxes:
        user = box.user
        text = (
            f"‚ùó –í–Ω–∏–º–∞–Ω–∏–µ: —Å—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ—Ä–æ–±–∫–∏ #{box.id} –∏—Å—Ç—ë–∫ {box.end_date}. "
            f"–•—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –ø–æ –ø–æ–≤—ã—à–µ–Ω–Ω–æ–º—É —Ç–∞—Ä–∏—Ñ—É. "
            f"–ü—Ä–æ–¥–ª–∏—Ç–µ –∞—Ä–µ–Ω–¥—É –∏–ª–∏ –∑–∞–±–µ—Ä–∏—Ç–µ –≤–µ—â–∏."
        )

        if not Notification.objects.filter(user=user, box=box, notification_type="overdue_notice").exists():
            try:
                bot.send_message(chat_id=user.telegram_id, text=text)
                Notification.objects.create(
                    user=user,
                    box=box,
                    notification_type="overdue_notice"
                )
                print(f"[INFO] –ü—Ä–æ—Å—Ä–æ—á–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.full_name}")
            except Exception as e:
                print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ—Å—Ä–æ—á–∫–µ: {e}")


def start_scheduler():
    scheduler = BackgroundScheduler()

    
    scheduler.add_job(monthly_reminder_job, 'cron', day=1, hour=10)

    
    scheduler.add_job(warning_before_expiration_job, 'cron', hour=9)

    
    scheduler.add_job(overdue_storage_job, 'cron', hour=10, minute=30)

    scheduler.start()
    print("[SCHEDULER] –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.")